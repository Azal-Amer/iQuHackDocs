<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[iQuHackDocumentation]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://azalamer.com/iQuhackDocs/</link><image><url>https://azalamer.com/iQuhackDocs/lib/media/favicon.png</url><title>iQuHackDocumentation</title><link>https://azalamer.com/iQuhackDocs/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 02 Feb 2025 14:54:44 GMT</lastBuildDate><atom:link href="https://azalamer.com/iQuhackDocs/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 02 Feb 2025 14:54:41 GMT</pubDate><copyright><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></copyright><ttl>60</ttl><dc:creator>Azal, Aravind, Madison,Ayden,Daniel</dc:creator><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>For this task, we simulate the time-evolution of the whole cat-system using qubits. We simulate the hamiltonian which corresponds to the resonator, and it's associated coupling to the buffer.<br><br>Because we are working with operators acting on spaces with different degrees of freedom, we very quickly ran into a dimension error. The initial truncated Hilbert spaces were simply the wrong dimensions. The solution to that was simple enough, we used the tensor product. Any operator which only acted on the resonator in the space, was tensored with  so that it could operate in the composite Hilbert space.<br>After finding our solution, we took the partial trace of the resonator to reconstruct the individual behavior. <br><br>We set up the simulation in the following way:<br>Hbuff = g2 * dq.dag(a) @ dq.dag(a) @ b + jnp.conj(g2) * a @ a @ dq.dag(b) + jnp.conj(eps) * b + eps * dq.dag(b)

# Modelling our buffer interaction hamiltonian

jump_ops = [jnp.sqrt(Kb)*b] # jump operators

exp_ops = [dq.dag(a) @ a] # expectation operators

res = dq.mesolve(Hbuff,jump_ops, psi0, t_save, exp_ops=exp_ops) # solve the master equation

  

trace_a = dq.ptrace(res.states, 0,res.states.dims) # partial trace over b
<br>Below you can see the Wigner probability distribution<br><br>From here, we knew that to find the number of photons we needed the expectation value of the number operator. Similarly to get the flux we needed the expectation value of the parity operator. <br>numOp = dq.tensor(dq.number(na), dq.eye(nb))
parity_diag_matrix = parity(na)
<br>Finally we looped through all the states in the evolution and calculated the parity<br>
and number. We expected the parity to be constant (as it implied the buffer was working), and the photon number to increase. <br>]]></description><link>https://azalamer.com/iQuhackDocs/problem-1/task-1.1-getting-started-with-dynamiqs.html</link><guid isPermaLink="false">Problem 1/Task 1.1 - Getting started with dynamiqs.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:36:31 GMT</pubDate><enclosure url="https://azalamer.com/iQuhackDocs/lib/media/zop.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src="https://azalamer.com/iQuhackDocs/lib/media/zop.gif"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>We compared the dynamics between the full two-mode system (memory + buffer) to a simplified effective model where the buffer mode has been eliminated adiabatically. The key analysis tool was examining how the fidelity between these two approaches evolved over time.<br><br>The full system evolves according to the master equation:<br><br>With Hamiltonian:<br><br>After adiabatic elimination of the buffer mode, the system reduces to:<br><br>Where:<br>
<br> is the two-photon dissipation rate
<br> defines the cat amplitude
<br>We can see that our jump operator is of the form 

based on <a data-tooltip-position="top" aria-label="https://www.dynamiqs.org/stable/documentation/advanced_examples/kerr-oscillator.html" rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/documentation/advanced_examples/kerr-oscillator.html" target="_blank">this link</a>. 
<br><br>
<br>Reduced system with eliminated buffer mode
<br>Used DynamiQs fidelity function to compare states between 1.1 and 1.2
<br>Created visualizations:

<br>Generated animations to show temporal evolution 
<br>Plotted fidelity vs time for different  values


<br>Key findings:

<br>Identified decay in fidelity between models over time
<br>Demonstrated the lack of sensitivity to  parameter


<br>For details on parameter settings and specific visualization code, consult the associated Jupyter notebook.<br><br>]]></description><link>https://azalamer.com/iQuhackDocs/problem-1/task-1.2-comparison-with-eliminated-buffer-mode.html</link><guid isPermaLink="false">Problem 1/Task 1.2- Comparison with eliminated buffer mode.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:36:50 GMT</pubDate><enclosure url="https://azalamer.com/iQuhackDocs/lib/media/heyo.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src="https://azalamer.com/iQuhackDocs/lib/media/heyo.gif"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>For this challenge, we were tasked with finding the Z rotation gate for the cat state. In other words, we are to find the state that takes the all evens (Cat plus state) to the all odds (Cat minus state) and vice versa. Due to the form of the Hamiltonian as well as the system we are describing, we know that parity will not be preserved. Therefore, we conclude that the Hamiltonian describing the Z rotation is the sum of the creation and annihilation operators (weighted by constant ).<br><br>We know that the unitary will take the form of the time evolution operator  and that the Hamiltonian takes the form , which led us to our conclusion. <br><br>Because a photon must be dissipated to change parity, we have the jump operation (argument of dissipation function) as:<br>jump_ops = [a_tensored- alpha*dq.tensor(dq.eye(na), dq.eye(nb))]
<br>And in latex as<br><br>We also have the given Hamiltonian:<br>Hbuff = g2 * dq.dag(a) @ dq.dag(a) @ b  + jnp.conj(g2) * a @ a @ dq.dag(b) + jnp.conj(eps) * b + eps * dq.dag(b)
<br>Written in latex as<br><br>and the Zeno Hamiltonian:<br>H_zeno = epsilon_z.conjugate()*a_tensored@a_tensored+epsilon_z*adag_tensored@adag_tensored
<br><br><br>]]></description><link>https://azalamer.com/iQuhackDocs/problem-1/task-1.3-zeno-gate-implementation.html</link><guid isPermaLink="false">Problem 1/Task 1.3 - Zeno Gate Implementation.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:37:01 GMT</pubDate><enclosure url="https://azalamer.com/iQuhackDocs/lib/media/zop.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src="https://azalamer.com/iQuhackDocs/lib/media/zop.gif"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>We created a gradient descent to model the optimization of the drive amplitude as a function of time in order to inflate the vacuum to the cat state as accurately as possible given the time frame and desired mean number of photons.<br><br>The total Hamiltonian is described by the two-photon Hamiltonian and a driving Hamiltonian. The amplitude of the driving now varies as a function of time, , so the total Hamiltonian is now described by , where . <br>The target state is a cat state constructed from two coherent states, , with the target amplitude chosen such that the average photon number is .<br>The loss function is defined based on the seviatation of the expected photon number of the final state from the target value:<br>
<br>The drive amplitude  for <br><br>How the code works:<br>Initialization: The simulation sets up a Hilbert space with a cutoff  and a total simulation time . The initial state is chosen as the vacuum state.<br># Simulation parameters (use lower resolution for debugging)
N_cutoff = 20  # Hilbert space dimension for the mode
T = 3.0 # Total evolution time
numTimes = 200 # Reduced number of time steps
t_save = jnp.linspace(0, T, numTimes)

<br>Defining the Fields: The drive amplitude is implemented as a piecewise constant function, where the vector eps_params holds the amplitude for each time bin.<br># Define a piecewise constant drive function.
def eps_d(t, eps_params):
    t = jnp.asarray(t)
    N_bins = eps_params.shape[0]
    bin_index = jnp.minimum((t / T * N_bins).astype(jnp.int32), N_bins - 1)
    return eps_params[bin_index]
<br>Loss function: The loss function uses the expectation value of the number operator and compares it to the target value of 4. The loss function simulates the evolution (using dq.mesolve) and computes the loss as the squared difference between the expected photon number and 4, with normalization.<br>def loss(eps_params):
    H_time_current = make_H_time(eps_params)
    result = dq.mesolve(H_time_current,jumpOp, psi0, t_save)
    # result = dq.sesolve(H_time_current, psi0, t_save)

    final_state = result.states[-1]
    # fid = dq.fidelity(final_state, cat_target)
    a = dq.destroy(psi0.shape[0])
    adag = dq.dag(a)
    N = adag@a
    expecVal = dq.expect(N, final_state)
    return (jnp.real((expecVal-4)/(4**2))**2)

<br>Optimization: The gradients of the loss with respect to the drive amplitudes are computed using JAX.<br>grad_loss = jax.grad(loss)
optimizer = optax.adam(learning_rate=0.09)
opt_state = optimizer.init(eps_params_init)
eps_params = eps_params_init

\# Iterative solver using gradient descent to find the driven amplitude as a function of time. 
n_iterations = 10
for i in range(n_iterations):
    grads = grad_loss(eps_params)
    updates, opt_state = optimizer.update(grads, opt_state)
    eps_params = optax.apply_updates(eps_params, updates)
    print(f"Iteration {i}: Loss = {loss(eps_params):.6f}")


Plotting: The optimized drive amplitudes are plotted as a function of time. 
\# Plot the driven amplitude as a function of time.
times = jnp.linspace(0, T, N_bins)
plt.plot(times, jnp.real(eps_params), label="Real part")
#plt.plot(times, jnp.imag(eps_params), label="Imaginary part")
plt.xlabel("Time")
plt.ylabel("Drive amplitude")
plt.legend()
plt.show()
]]></description><link>https://azalamer.com/iQuhackDocs/problem-1/task-1.4-optimal-control-for-state-preparation.html</link><guid isPermaLink="false">Problem 1/Task 1.4 - Optimal Control for State-Preparation.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:30:29 GMT</pubDate></item><item><title><![CDATA[Development Process]]></title><description><![CDATA[ 
 <br><br>When working on our process, maintaining a safe programming environment became essential as we switched between qBraid and local environments. Our git environment was very standard, one main branch with branches off, and commits required pull requests to move upstream.<br><br>We chose to solve each problem in an independent notebook to make parallel work simpler. Additionally near the end, we refactored to hold key constants and methods in the globalConstants.py file. <br>Any methods used had to come associated with doc-strings as well.]]></description><link>https://azalamer.com/iQuhackDocs/problem-2/methods-and-constants.html</link><guid isPermaLink="false">Problem 2/Methods and Constants.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 12:22:10 GMT</pubDate></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>This project simulates a superconducting circuit with two modes (a "memory" mode and a "buffer" mode) subject to parametric drives. This is solely for the lab-frame.<br><br>
<br>Modes and Frequencies: 
<br>Two modes with bare resonant frequencies  and  are defined. The AC Stark shifts  and  are computed iteratively to update these frequencies. 
<br>Driving Terms: A flux pump with amplitude  and a buffer drive with amplitude  modulate the system. The flux pump produces an Autler–Townes Splitting term with sinusoidal modulation, while the buffer drive acts directly on the buffer mode. -
<br>Hamiltonians: : 

<br>Effective Lab–Frame Hamiltonian : Incorporates the bare Hamiltonian, ATS term (with sine and cosine functions of the phase operator), and the buffer drive.


<br><br>
<br>Parameter and Operator Definitions: - Define units, system parameters (frequencies, coupling strengths, and loss rates). - Compute the AC Stark shifts iteratively. - Construct the Fock space and corresponding annihilation operators for each mode. 
<br>Hamiltonian Construction:

<br>Effective Lab–Frame Hamiltonian 

<br>Defined by the bare mode energies, the ATS driving term modulated by the flux pump, and the buffer drive.




<br>Simulation: - Define collapse operators to model dissipation in both modes. - Initialize the system in the vacuum state. - Use dq.mesolve to simulate the time evolution under both Hamiltonians. - Visualize the state dynamics using Wigner function plots. 
<br><img alt="output" src="https://azalamer.com/iQuhackDocs/lib/media/output.gif">Wigner probability distribution of the lab-frame state]]></description><link>https://azalamer.com/iQuhackDocs/problem-2/task-2.1-lab-frame-simulation.html</link><guid isPermaLink="false">Problem 2/Task 2.1 - Lab Frame Simulation.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:37:09 GMT</pubDate><enclosure url="https://azalamer.com/iQuhackDocs/lib/media/output.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src="https://azalamer.com/iQuhackDocs/lib/media/output.gif"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>This section focuses exclusively on the implementation and simulation of the rotated–displaced Hamiltonian. In this approach, the Hamiltonian is transformed into a frame that both rotates and displaces the original operators. This transformation simplifies the description of the driven system by absorbing part of the drive into the new frame, and it introduces additional correction terms.<br><br>
<br>Displacement Fields: The displacement for each mode is defined as a combination of two frequency components:  where  and  are determined by the system parameters and the flux pump amplitude. 
<br>Rotated–Displaced Operators: The operators in the new frame are defined as:  where  is the identity operator and  and  are the chosen rotation frequencies.
<br>Hamiltonian Contributions: The total rotated–displaced Hamiltonian  consists of several parts:

<br>Linear Term : Represents the bare mode energies in the new frame.
<br>Rotating Frame Correction : Compensates for the energy offset due to the frame rotation. 
<br>Displacement Derivative Correction : Arises from the time derivative of the displacement fields. 
<br>ATS Term : Includes a Taylor expansion of the sinusoidal modulation (due to the flux pump) that produces the Autler–Townes Splitting. 
<br>Buffer Drive : The drive acting on the buffer mode appears non-rotating in this frame.


<br><br>The rotated–displaced Hamiltonian is implemented as a time-dependent function hamiltonian_rotating_displaced(t).<br>
Key steps include:<br>
<br>
Computing Displacement Fields: The fields  and  and their time derivatives ( and ) are computed using the defined frequency .

<br>
Constructing Rotated–Displaced Operators: The function op_rot_displaced is used to generate the time-dependent operators , , , and .

<br>
Building the Hamiltonian: Each term is calculated:

<br>: The energy of the modes in the new frame.
<br>: The correction due to the chosen rotating frame frequencies.
<br>: The correction arising from the time derivatives of the displacement fields.
<br>: Constructed using a Taylor series expansion of the sine and cosine functions to approximate the ATS term.
<br>: The drive term on the buffer mode, adjusted for the rotated frame.


<br>
Time-Callable Function: The complete Hamiltonian is wrapped using dq.timecallable, making it ready for time-dependent simulation.

<br>
Simulation: Using dq.mesolve, the system's evolution under  is computed. The simulation incorporates collapse operators to model dissipation in both modes.

<br>]]></description><link>https://azalamer.com/iQuhackDocs/problem-2/task-2.2-rotating-frame-simulation.html</link><guid isPermaLink="false">Problem 2/Task 2.2 - Rotating Frame Simulation.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:37:15 GMT</pubDate><enclosure url="https://azalamer.com/iQuhackDocs/lib/media/ahhhhh.gif" length="0" type="image/gif"/><content:encoded>&lt;figure&gt;&lt;img src="https://azalamer.com/iQuhackDocs/lib/media/ahhhhh.gif"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>This section details the comparison between the effective lab–frame Hamiltonian model and the full rotated–displaced Hamiltonian model by evaluating the fidelity between their resulting quantum states over time. The fidelity serves as a quantitative measure of how closely the effective model reproduces the dynamics of the full model.<br><br>
<br>Fidelity Definition: The fidelity  between two quantum states  and  is defined as:<br>
A fidelity of 1 indicates that the states are identical, while lower values indicate deviations between the models.
<br>State Evolution: Both the effective lab–frame Hamiltonian  and the rotated–displaced Hamiltonian  are simulated over the same time grid. At each time point, the fidelity between the state produced by the effective model and that produced by the full model is calculated.
<br><br>
<br>Simulating Both Models:

<br>The effective lab–frame Hamiltonian is defined as H_lab and simulated using dq.mesolve.
<br>The rotated–displaced Hamiltonian is defined as H_rd and similarly simulated with dq.mesolve.
<br>Both simulations use the same initial state (typically the vacuum state) and identical time grids.


<br>Fidelity Calculation:

<br>For each time step, the fidelity is computed using dq.fidelity(state_lab, state_rd), where state_lab is the state from the effective model and state_rd is the state from the full rotated–displaced model.
<br>The fidelity values are stored in an array for subsequent analysis and visualization.


<br>Visualization:

<br>A plot of fidelity versus time is generated using matplotlib. This plot provides a visual representation of how well the effective model approximates the full dynamics.
<br>In practice, a fidelity close to 1 over the simulation time indicates that the effective model captures the essential physics, while deviations reveal discrepancies likely due to higher-order corrections or transient effects not captured by the effective approximation.


]]></description><link>https://azalamer.com/iQuhackDocs/problem-2/task-2.3-comparison-and-fidelity-analysis.html</link><guid isPermaLink="false">Problem 2/Task 2.3 - Comparison and Fidelity Analysis.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:30:30 GMT</pubDate></item><item><title><![CDATA[Overview]]></title><description><![CDATA[ 
 <br><br>This section describes the optimal control strategy used to steer the dynamics of the rotated–displaced Hamiltonian toward a target cat state. The goal is to find control scaling factors that modify the ATS (flux pump) and buffer drive amplitudes so that the final state of the system closely matches the desired cat state. <br><br>
<br>Control Parameters: Two control parameters are introduced: - : Scaling factor for the ATS drive amplitude. - : Scaling factor for the buffer drive amplitude. 

<br>Modified Hamiltonian: The original rotated–displaced Hamiltonian is modified by these factors. The effective flux pump becomes:  and the buffer drive is scaled as:  These modifications directly affect the ATS term and the buffer drive term in the Hamiltonian. 
<br>Objective Function: The control objective is to maximize the fidelity between the final state at the end of the simulation and a pre-defined target cat state. The cost function to be minimized is:  where  is the fidelity measure, and  is the desired cat state. # Implementation 


<br>
<br>Hamiltonian Modification: The function hamiltonian_rd_opt(t, control) returns the full rotated–displaced Hamiltonian with the ATS and buffer drive terms scaled by  and , respectively. 
<br>Simulation Wrapper: The function simulate_rd(control, tgrid=tsave) creates a time-callable Hamiltonian with the given control parameters and runs the simulation using dq.mesolve. The dynamics are obtained over the defined time grid. 
<br>Objective Function: The objective(control) function runs a simulation with the given control parameters and computes the infidelity  between the final state and the target cat state. This function is designed for use with an optimization routine. 
<br>Optimization Routine: Using the Nelder-Mead algorithm (a gradient-free method), the control parameters are optimized starting from an initial guess (typically ). The optimization minimizes the cost function, thereby maximizing the fidelity with the target state. 
<br>Final Simulation and Visualization: With the optimal control parameters found, a full simulation is run. The fidelity between the state at each time and the target cat state is computed and plotted. In addition, the evolution of the state is visualized using a Wigner function animation for mode . 
]]></description><link>https://azalamer.com/iQuhackDocs/problem-2/task-2.4-optimal-control-for-cat-state-preparation.html</link><guid isPermaLink="false">Problem 2/Task 2.4 - Optimal Control for Cat State Preparation.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:30:30 GMT</pubDate></item><item><title><![CDATA[index]]></title><description><![CDATA[ 
 <br>Welcome to the navigation to our code documentation for the 2025 MIT iQuHack Hackathon's Alice and Bob Challenge! Below is the table of contents. Additionally, you can find information on our code style <a data-tooltip-position="top" aria-label="Methods and Constants" data-href="Methods and Constants" href="https://azalamer.com/iQuhackDocs/problem-2/methods-and-constants.html" class="internal-link" target="_self" rel="noopener nofollow">here</a>.<br><br><br><br>“Displace - Dynamiqs.” Accessed February 2, 2025. <a rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/python_api/utils/operators/displace.html#dynamiqs.utils.operators.displace" target="_blank">https://www.dynamiqs.org/stable/python_api/utils/operators/displace.html#dynamiqs.utils.operators.displace</a>.<br>“Driven-Dissipative Kerr Oscillator - Dynamiqs.” Accessed February 2, 2025. <a rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/documentation/advanced_examples/kerr-oscillator.html" target="_blank">https://www.dynamiqs.org/stable/documentation/advanced_examples/kerr-oscillator.html</a>.<br>“Expm - Dynamiqs.” Accessed February 2, 2025. <a rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/python_api/solver/Expm.html" target="_blank">https://www.dynamiqs.org/stable/python_api/solver/Expm.html</a>.<br>“Fidelity - Dynamiqs.” Accessed February 2, 2025. <a rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/python_api/utils/general/fidelity.html#dynamiqs.utils.general.fidelity" target="_blank">https://www.dynamiqs.org/stable/python_api/utils/general/fidelity.html#dynamiqs.utils.general.fidelity</a>.<br>l1xnan. “L1xnan/Obsidian-Better-Export-Pdf.” TypeScript, February 1, 2025. <a rel="noopener nofollow" class="external-link" href="https://github.com/l1xnan/obsidian-better-export-pdf" target="_blank">https://github.com/l1xnan/obsidian-better-export-pdf</a>.<br>“The Sharp Bits 🔪 - Dynamiqs.” Accessed February 2, 2025. <a rel="noopener nofollow" class="external-link" href="https://www.dynamiqs.org/stable/documentation/getting_started/sharp-bits.html" target="_blank">https://www.dynamiqs.org/stable/documentation/getting_started/sharp-bits.html</a>.]]></description><link>https://azalamer.com/iQuhackDocs/index.html</link><guid isPermaLink="false">index.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:34:02 GMT</pubDate></item><item><title><![CDATA[Untitled]]></title><description><![CDATA[ 
 ]]></description><link>https://azalamer.com/iQuhackDocs/untitled.html</link><guid isPermaLink="false">Untitled.md</guid><dc:creator><![CDATA[Azal, Aravind, Madison,Ayden,Daniel]]></dc:creator><pubDate>Sun, 02 Feb 2025 14:53:15 GMT</pubDate></item></channel></rss>